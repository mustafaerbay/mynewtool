name: Go

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  lint:
    image: registry.gitlab.com/gitlab-org/gitlab-build-images:golangci-lint-alpine
    stage: test
    script:
      # Use default .golangci.yml file from the image if one is not present in the project root.
      - '[ -e .golangci.yml ] || cp /golangci/.golangci.yml .'
      # Write the code coverage report to gl-code-quality-report.json
      # and print linting issues to stdout in the format: path/to/file:line description
      # remove `--issues-exit-code 0` or set to non-zero to fail the job if linting issues are detected
      - golangci-lint run --issues-exit-code 0 --out-format code-climate | tee gl-code-quality-report.json | jq -r '.[] | "\(.location.path):\(.location.lines.begin) \(.description)"'
    artifacts:
      reports:
        codequality: gl-code-quality-report.json
      paths:
        - gl-code-quality-report.json
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: ["386", arm]
    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.15

    - name: Build
      run: GOOS=darwin GOARCH=${{ matrix.arch }} go build -v ./... -o mynewtool_${{ matrix.arch }}

    - name: Test
      run: go test -v ./...
    
    - name: package
      uses: actions/upload-artifact@v2
      with:
        name: mynewtool_${{ matrix.arch }}
        path: .
        if-no-files-found: error
